generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  SMALL
  MEDIUM
  LARGE
  X_LARGE
  XX_LARGE
}

enum Role {
  USER
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player?
}

model Player {
  id          String             @id @default(cuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String             @unique
  size        Size
  number      Int
  totalStats  PlayerTotalStats?
  seasonStats SeasonStats[]
  matchStats  PlayerMatchStats[]
  team        Team?              @relation("TeamPlayers", fields: [teamId], references: [id])
  teamId      String?
  transfers   Transfer[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model PlayerTotalStats {
  id          String   @id @default(cuid())
  player      Player   @relation(fields: [playerId], references: [id])
  playerId    String   @unique
  points      Int
  assists     Int
  rebounds    Int
  gamesPlayed Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SeasonStats {
  id          String   @id @default(cuid())
  player      Player   @relation(fields: [playerId], references: [id])
  playerId    String
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  points      Int
  assists     Int
  rebounds    Int
  gamesPlayed Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlayerMatchStats {
  id        String   @id @default(cuid())
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  points    Int
  assists   Int
  rebounds  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id           String     @id @default(cuid())
  name         String
  season       Season     @relation(fields: [seasonId], references: [id])
  seasonId     String
  players      Player[]   @relation("TeamPlayers")
  homeMatches  Match[]    @relation("HomeTeam")
  awayMatches  Match[]    @relation("AwayTeam")
  wins         Match[]    @relation("WinnerTeam")
  transfersOut Transfer[] @relation("FromTeam")
  transfersIn  Transfer[] @relation("ToTeam")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Match {
  id          String             @id @default(cuid())
  status      MatchStatus        @default(SCHEDULED)
  homeTeam    Team               @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId  String
  awayTeam    Team               @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId  String
  winner      Team?              @relation("WinnerTeam", fields: [winnerId], references: [id])
  winnerId    String?
  season      Season             @relation(fields: [seasonId], references: [id])
  seasonId    String
  date        DateTime
  playerStats PlayerMatchStats[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([homeTeamId, awayTeamId, seasonId])
}

model Season {
  id          String        @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean       @default(true)
  teams       Team[]
  matches     Match[]
  SeasonStats SeasonStats[]
  transfers   Transfer[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([isActive])
}

model Transfer {
  id         String   @id @default(cuid())
  player     Player   @relation(fields: [playerId], references: [id])
  playerId   String
  fromTeam   Team?    @relation("FromTeam", fields: [fromTeamId], references: [id])
  fromTeamId String?
  toTeam     Team     @relation("ToTeam", fields: [toTeamId], references: [id])
  toTeamId   String
  season     Season   @relation(fields: [seasonId], references: [id])
  seasonId   String
  date       DateTime

  @@index([playerId, fromTeamId, toTeamId, seasonId])
}
