generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Size {
  SMALL
  MEDIUM
  LARGE
  X_LARGE
  XX_LARGE
}

enum Role {
  USER
  ADMIN
}

enum Position {
  PG
  SG
  SF
  PF
  C
  PG_SG
  PG_SF
  PG_PF
  SG_SF
  SG_PF
  PF_C
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELED
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String
  phone     String
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Player    Player?
}

model Season {
  id                  String                @id @default(cuid())
  name                String
  shortName           String?
  startDate           DateTime
  endDate             DateTime
  isActive            Boolean               @default(true)
  teams               Team[]
  matches             Match[]
  SeasonStats         PlayerSeasonStats[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PlayerSeasonDetails PlayerSeasonDetails[]

  @@index([isActive])
}

model Team {
  id          String                @id @default(cuid())
  name        String
  logo        String
  season      Season                @relation(fields: [seasonId], references: [id])
  seasonId    String
  players     PlayerSeasonDetails[]
  homeMatches Match[]               @relation("HomeTeam")
  awayMatches Match[]               @relation("AwayTeam")
  wins        Match[]               @relation("WinnerTeam")
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model Match {
  id             String                     @id @default(cuid())
  status         MatchStatus                @default(SCHEDULED)
  date           DateTime
  homeTeam       Team                       @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId     String
  awayTeam       Team                       @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId     String
  winner         Team?                      @relation("WinnerTeam", fields: [winnerId], references: [id])
  winnerId       String?
  season         Season                     @relation(fields: [seasonId], references: [id])
  seasonId       String
  homeScore      Int                        @default(0)
  awayScore      Int                        @default(0)
  participations PlayerMatchParticipation[]
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  @@index([homeTeamId, awayTeamId, seasonId])
}

model Player {
  id             String                     @id @default(cuid())
  user           User                       @relation(fields: [userId], references: [id])
  userId         String                     @unique
  phone          String?
  position       Position?
  size           Size
  totalStats     PlayerTotalStats?
  seasonDetails  PlayerSeasonDetails[]
  participations PlayerMatchParticipation[]
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  SeasonStats    PlayerSeasonStats[]
}

model PlayerSeasonDetails {
  id        String   @id @default(cuid())
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  season    Season   @relation(fields: [seasonId], references: [id])
  seasonId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerId, seasonId])
}

model PlayerMatchParticipation {
  id        String            @id @default(cuid())
  player    Player            @relation(fields: [playerId], references: [id])
  playerId  String
  match     Match             @relation(fields: [matchId], references: [id])
  matchId   String
  stats     PlayerMatchStats?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([playerId, matchId])
}

model PlayerTotalStats {
  id          String   @id @default(cuid())
  player      Player   @relation(fields: [playerId], references: [id])
  playerId    String   @unique
  points      Int      @default(0)
  assists     Int      @default(0)
  rebounds    Int      @default(0)
  fouls       Int      @default(0)
  gamesPlayed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlayerSeasonStats {
  id          String   @id @default(cuid())
  player      Player   @relation(fields: [playerId], references: [id])
  playerId    String
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  points      Int      @default(0)
  assists     Int      @default(0)
  rebounds    Int      @default(0)
  fouls       Int      @default(0)
  gamesPlayed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([playerId, seasonId])
}

model PlayerMatchStats {
  id                         String                   @id @default(cuid())
  playerMatchParticipationId String                   @unique
  participation              PlayerMatchParticipation @relation(fields: [playerMatchParticipationId], references: [id])
  points                     Int                      @default(0)
  assists                    Int                      @default(0)
  rebounds                   Int                      @default(0)
  fouls                      Int                      @default(0)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
}
